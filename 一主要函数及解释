1. 导入必要的库（使用多元线性回归模型）
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression  #线性回归
from sklearn.preprocessing import StandardScaler  #标准化
from sklearn.metrics import mean_squared_error, r2_score #决定系数和MSE

2.数据处理
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data"
column_names = [
    'CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',
    'PTRATIO', 'B', 'LSTAT', 'MEDV'
]#手动命名
df = pd.read_csv(url, delim_whitespace=True, header=None, names=column_names) #csv格式导入

3. 预处理数据
X = df.drop('MEDV', axis=1)  # 选取特征变量（去掉目标值 MEDV）
y = df['MEDV']  # 目标变量（房价
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
#标准化处理

4. 训练集和测试集划分
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
#80%用于训练

5.训练模型
model = LinearRegression()
model.fit(X_train, y_train)

6.预测模型
y_pred = model.predict(X_test)

7.评估模型
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"均方误差 (MSE): {mse:.2f}")
print(f"R² 决定系数: {r2:.2f}")

8.查看参数
intercept = model.intercept_
coefficients = model.coef_
print(f"\n截距 (Intercept): {intercept:.2f}")
print("回归系数 (Coefficients):")
for feature, coef in zip(X.columns, coefficients):
    print(f"{feature}: {coef:.4f}")

9.可视化
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.xlabel("真实房价")
plt.ylabel("预测房价")
plt.title("真实房价 vs. 预测房价")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--') # 45度直线
plt.show()

plt.figure(figsize=(10,6))
sns.barplot(x=X.columns, y=coefficients)
plt.xticks(rotation=90)
plt.xlabel("特征")
plt.ylabel("回归系数")
plt.title("线性回归模型的特征影响力")
plt.show()


