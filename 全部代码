import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data"
column_names = [
    'CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',
    'PTRATIO', 'B', 'LSTAT', 'MEDV'
]
df = pd.read_csv(url, delim_whitespace=True, header=None, names=column_names)


X = df.drop('MEDV', axis=1)  
y = df['MEDV']  

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"均方误差 (MSE): {mse:.2f}")
print(f"R² 决定系数: {r2:.2f}")

intercept = model.intercept_
coefficients = model.coef_

print(f"\n截距 (Intercept): {intercept:.2f}")
print("回归系数 (Coefficients):")
for feature, coef in zip(X.columns, coefficients):
    print(f"{feature}: {coef:.4f}")

plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.xlabel("真实房价")
plt.ylabel("预测房价")
plt.title("真实房价 vs. 预测房价")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--') # 45度直线
plt.show()

residuals = y_test - y_pred
plt.figure(figsize=(8,6))
sns.histplot(residuals, bins=30, kde=True)
plt.xlabel("残差值")
plt.ylabel("频率")
plt.title("残差分布图")
plt.show()

plt.figure(figsize=(10,6))
sns.barplot(x=X.columns, y=coefficients)
plt.xticks(rotation=90)
plt.xlabel("特征")
plt.ylabel("回归系数")
plt.title("线性回归模型的特征影响力")
plt.show()解释 
